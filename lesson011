1.1. Organizing Tabular Data in Python
NO.1 When working with this sort of tabular data, it's important to organize row and columns following the principles of "tidy data." What does that mean in the case of our dataset?

Each row corresponds to a single house in our dataset. We'll call each of these houses an observation.
Each column corresponds to a characteristic of each house. We'll call these features.
Each cell contains only one value.

NO.2 list:
eg:house_0_list = [115910.26, 128, 4];house_0_list[0]=115910.26
#the first item in a list is always 0.

house_0_price_m2 = house_0_list[0]/ house_0_list[1]

append:
to add a new item at the end.
eg:house_0_list.append(house_0_price_m2)
then,house_0_list=[115910.26, 128, 4, 905.54890625]

list嵌套list:
houses_nested_list = [
    [115910.26, 128.0, 4.0],
    [48718.17, 210.0, 3.0],
    [28977.56, 58.0, 2.0],
    [36932.27, 79.0, 3.0],
    [83903.51, 111.0, 3.0],
]
list为list中的元素

用for循环计算list元素构成的函数
eg:for house in houses_nested_list:
    price_m2 = house[0]/house[1]
    house.append(price_m2)
    
houses_nested_list
then,每个list的最后都会增加一个元素

NO.3 dictionary：
比起list有key可以知道values代表什么
eg:
house_0_dict = {
    "price_aprox_usd": 115910.26,
    "surface_covered_in_m2": 128,
    "rooms": 4,
}
output:
house_0_dict={'price_aprox_usd': 115910.26, 'surface_covered_in_m2': 128, 'rooms': 4}

Calculate:
eg:
house_0_dict["price_per_m2"] = house_0_dict["price_aprox_usd"]/house_0_dict["surface_covered_in_m2"]
then,
house_0_dict={'price_aprox_usd': 115910.26,
 'surface_covered_in_m2': 128,
 'rooms': 4,
 'price_per_m2': 905.54890625}
 
 JSON:
JSON stands for Java Script Object Notation, and it's a text format for storing and transporting data.
JSON works by creating key-value pairs, where the key is data that can be represented by letters (called a string). 
JSON values can be strings, numbers, objects, arrays, boolean data, or null. 
JSON usually comes as a list of dictionaries.

eg:houses_rowwise is a dictionary
for house in houses_rowwise:
    house["price_per_m2"] = house["price_aprox_usd"]/house["surface_covered_in_m2"]
houses_rowwise
the step add "price_per_m2" and its value in the end of the dictionary.

calculate:利用for循环
#建空列表
house_prices = []
#将houses_rowwise中"price_aprox_usd"的值都添加到house_prices列表中
for house in houses_rowwise:
    house_prices.append(house["price_aprox_usd"])
#计算平均数，sum求和列表元素，len计算个数   
mean_house_price = sum(house_prices) / len(house_prices)

#计算dictionary中的list
eg:
houses_columnwise = {
    "price_aprox_usd": [115910.26, 48718.17, 28977.56, 36932.27, 83903.51],
    "surface_covered_in_m2": [128.0, 210.0, 58.0, 79.0, 111.0],
    "rooms": [4.0, 3.0, 2.0, 3.0, 3.0],
}
#求平均数
mean_house_price = sum(houses_columnwise["price_aprox_usd"])/len(houses_columnwise["price_aprox_usd"])

#利用for循环计算"price_per_m2"并添加到dictionary中
price = houses_columnwise["price_aprox_usd"]
area = houses_columnwise["surface_covered_in_m2"]
price_per_m2 = []
for p,a in zip(price,area):
    price_m2 = p/a
    price_per_m2.append(price_m2)
#添加新column
houses_columnwise["price_per_m2"] = price_per_m2

NO.4 DataFrames
a table tool in the data science libraries--pandas
eg:
#first,need to import
import pandas as pd
data = {
    "price_aprox_usd": [115910.26, 48718.17, 28977.56, 36932.27, 83903.51],
    "surface_covered_in_m2": [128.0, 210.0, 58.0, 79.0, 111.0],
    "rooms": [4.0, 3.0, 2.0, 3.0, 3.0],
}

df_houses = pd.DataFrame(data)


1.2 data wrangling with pandas
1.2.1 read csv file
eg:
df1 = pd.read_csv("data/mexico-real-estate-1.csv")
df2 = pd.read_csv("data/mexico-real-estate-2.csv")
df3 = pd.read_csv("data/mexico-real-estate-3.csv")

1.2.2 Inspect a DataFrame using the shape, info, and head in pandas.
df1.shape #显示数据的行数和列数(rows,columns)
df1.head() #显示dataframe table
df1.info() #显示数据详细信息，包括每列数据个数、类型、非空值个数

1.2.3
dropna #删除空值
df1.dropna(inplace=True)
str.replace #删除字符串中的字符
astype #改变数据类型
df1["price_usd"] = (df1["price_usd"].str.replace("$","",regex=False).str.replace(",","").astype(float))

1.2.4 drop删除columns
df2.dropna(inplace=True) #删除空值
df2["price_usd"] = (df2["price_mxn"]/19).round(2) #美元墨西哥元转换计算，round(2)保留2位小数
df2.drop(columns=["price_mxn"],inplace=True) #删除["price_mxn"] columns

1.2.5 split分割列
eg:
df3[["lat","lon"]]=df3["lat-lon"].str.split(",",expand=True)
意为将"lat-lon"列中以","进行分割成两列，分别命名为"lat","lon"。

1.2.6 drop删除columns
df3.drop(columns=["place_with_parent_names","lat-lon"],inplace=True)

1.2.7 concat合并列表
df = pd.concat([df1,df2,df3])

1.2.8 保存为新的csv文件
df.to_csv("data/mexico-real-estate-clean.csv",index=False)

1.3 Exploratory Data Analysis
first,import
import matplotlib.pyplot as plt
import pandas as pd
import plotly.express as px

1.3.1 Read the CSV file
df = pd.read_csv("data/mexico-real-estate-clean.csv")

1.3.2 Add "lat" and "lon" to the code below
eg:
plotly绘制地图
fig = px.scatter_mapbox(
    df,  # Our DataFrame
    lat="lat",
    lon="lon",
    center={"lat": 19.43, "lon": -99.13},  # Map will be centered on Mexico City
    width=600,  # Width of map
    height=600,  # Height of map
    hover_data=["price_usd"],  # Display price when hovering mouse over house
)

fig.update_layout(mapbox_style="open-street-map")

fig.show()

1.3.3 value_counts()计算"state"column的频次
df["state"].value_counts().head()

1.3.4 describe 描述性统计
df[["area_m2","price_usd"]].describe()
对"area_m2","price_usd"两列进行描述性统计
包括count，mean，std，min，25%，50%，75%，max	

1.3.5 Create a histogram 绘制直方图
plt.hist(df['area_m2']) #用'area_m2'列的数据
plt.xlabel("Area [sq meters]") #X轴命名
plt.ylabel("Frequency"); #Y轴命名
#在结尾添加 ; 可以删除描述性信息

1.3.6 Create a horizontal boxplot 绘制水平K线图
plt.boxplot(df["area_m2"],vert=False) #vert=False 意为水平，True或者不写则图像为竖直型
plt.xlabel("Area [sq meters]")
plt.title("Distribution of Home Sizes");

1.4 Location or Size

1.4.1 groupby创建序列
DataFrame.groupby(by=None, 
axis=0, 
level=None, 
as_index=True, 
sort=True, 
group_keys=_NoDefault.no_default, 
squeeze=_NoDefault.no_default, 
observed=False, 
dropna=True)

eg:
mean_price_by_state = df.groupby("state")["price_usd"].mean().sort_values(ascending=False)
计算每个"state"中"price_usd"的均值
sort_values(ascending=False) #降序排列

1.4.2 创建柱状图
eg:
mean_price_by_state.plot(
    kind="bar",
    xlabel="State",
    ylabel="Mean Price [USD]",
    title="Mean House Price by State"
);

1.4.3 利用groupby创建的序列创建柱状图
(
    df
    .groupby("state")
    ["price_per_m2"].mean()
    .sort_values(ascending=False)
    .plot(
        kind="bar",
        xlabel="State",
        ylabel="Mean Price per M^2[USD]",
        title="Mean House Price per M^2 by State"
    
    )
);

1.4.4 Create a scatter plot画散点图
plt.scatter(x=df["area_m2"],y=df["price_usd"])
plt.xlabel("Area [sq meters]")
plt.ylabel("Price [USD]")
plt.title("Price vs Area");

1.4.5 corr计算相关系数，越接近1正相关性越强，越接近-1负相关性越强，越接近0越没有相关性
p_correlation = df["area_m2"].corr(df["price_usd"])
print(p_correlation)

1.4.6 Create a new DataFrame
df_morelos = df[df["state"]=="Morelos"]





