2.1. Predicting Price with Size

import matplotlib.pyplot as plt
import pandas as pd
import wqet_grader
from IPython.display import VimeoVideo
from sklearn.linear_model import LinearRegression #build the model
from sklearn.metrics import mean_absolute_error #evaluate the moodel
from sklearn.utils.validation import check_is_fitted


2.1.1 建立函数function
def wrangle(filepath):
    #read CSV file into dataframe
    df = pd.read_csv(filepath)
    return df

df = wrangle("data/buenos-aires-real-estate-1.csv")
print("df shape:", df.shape)
df.head()

# Check your work
assert (
    len(df) <= 8606
), f"`df` should have no more than 8606 observations, not {len(df)}."

#unique
df[x].unique()
返回该列有多少种不同的值，列出不同的值

2.1.3
#建立筛选条件的函数
def wrangle(filepath):
    #read CSV file into dataframe
    df = pd.read_csv(filepath)
    
    #subset to properties in "Capital Federal"
    mask_ba = df["place_with_parent_names"].str.contains("Capital Federal")
    
    #subset to "apartments"
    mask_apt = df["property_type"] == "apartment"
    
    #subset to "properties"
    mask_price = df["price_aprox_usd"] < 400000
    
    df = df[mask_ba & mask_apt & mask_price]
    
    return df

2.1.4 Create a histogram
plt.hist(df["surface_covered_in_m2"])
plt.xlabel("Area [sq meters]")
plt.title("Distribution of Apartment Sizes");


2.1.5 
对整个表的各列进行描述性统计
df.describe()

对某一列进行描述性统计
df.describe()["surface_covered_in_m2"]

2.1.6删除“surface_covered_in_m2”列中异常值的观察结果。具体来说，所有观察值都应介于“surface_covered_in_m2”的 0.1 和 0.9 分位数之间
def wrangle(filepath):
    #read CSV file into dataframe
    df = pd.read_csv(filepath)
    
    #subset to properties in "Capital Federal"
    mask_ba = df["place_with_parent_names"].str.contains("Capital Federal")
    
    #subset to "apartments"
    mask_apt = df["property_type"] == "apartment"
    
    #subset to properties where "price_aprox_usd"< 400000
    mask_price = df["price_aprox_usd"] < 400000
    
    df = df[mask_ba & mask_apt & mask_price]
    
    #remove outliers by "surface_couvered_in_m2"
    low,high = df["surface_covered_in_m2"].quantile([0.1,0.9])
    mask_area = df["surface_covered_in_m2"].between(low,high)
    
    df = df[mask_area]
    
    return df

         #split
#linear regression线性回归

2.1.8 创建名为 X_train 的特征矩阵
只包含["surface_covered_in_m2"]一个特征
x--->features 特征
Y--->vector向量

features = ["surface_covered_in_m2"]
X_train = df[features]

2.1.9 Create the target vector named y_train
target = "price_aprox_usd"
y_train = df[target]

2.1.10 baselining 基线

2.1.11 创建一个名为 y_pred_baseline 的列表，其中包含重复的 y_mean 值，使其在 y 处的长度相同


2.1.12 把基线画到散点图上


2.1.13 平均绝对误差 (MAE)
绝对误差是单次测量的误差，平均绝对误差是多次测量过程中的平均误差。
MAE 越接近 0，我们的模型就越适合数据。

mae_baseline = mean_absolute_error(y_train,y_pred_baseline)

print("Mean apt price", round(y_mean, 2))
print("Baseline MAE:", round(mae_baseline, 2))

Iterate
2.1.14
迭代涉及构建模型、训练模型、评估模型，然后重复该过程，直到您对模型的性能感到满意为止。

Linear regression 线性回归

实例化一个名为 model 的 LinearRegression 模型。
model = LinearRegression()

# Check your work
assert isinstance(model, LinearRegression)

2.1.15 Fit your model to the data, X_train and y_train.
model.fit(X_train, y_train)

# Check your work
check_is_fitted(model)

   evaluate
2.1.16  create a list of predictions for the observations in your feature matrix X_train.

y_pred_training = model.predict(X_train)
y_pred_training[:5]

# Check your work
assert (
    len(y_pred_training) == 1343
), f"There should be 1343 predictions in `y_pred_training`, not {len(y_pred_training)}."

2.1.17 Calculate your training mean absolute error for your predictions
mae_training = mean_absolute_error(y_train, y_pred_training)
print("Training MAE:", round(mae_training, 2))

2.1.18


Communicate Results

2.1.19 Extract the intercept from your model, and assign it to the variable intercept.

intercept = round(model.intercept_,2)
print("Model Intercept:", intercept)
assert any([isinstance(intercept, int), isinstance(intercept, float)])

2.1.20 Extract the coefficient
coefficient = round(model.coef_[0],2)
print('Model coefficient for "surface_covered_in_m2":', coefficient)
assert any([isinstance(coefficient, int), isinstance(coefficient, float)])

2.1.21 print out the complete equation
print(f"apt_price = {intercept} + {coefficient} * surface_couvered")

2.1.22 Add a line to the plot

plt.plot(X_train.values, model.predict(X_train), color="r", label="Linear Model")
plt.scatter(X_train, y_train)
plt.xlabel("surface covered [sq meters]")
plt.ylabel("price [usd]")
plt.legend();

2.2



2.3

2.3.1
# glob
glob.glob(pathname, *, root_dir=None, dir_fd=None, recursive=False, include_hidden=False)

# Use glob to create a list that contains the filenames for all the Buenos Aires real estate CSV files
files = glob("data/buenos-aires-real-estate-*.csv")
files

2.3.2 Use your wrangle function in a for loop to create a list named frames. 
frames = []
for file in files:
    df = wrangle(file)
    frames.append(df)

2.3.3 Use pd.concat to concatenate the items in frames into a single DataFrame df.
df = pd.concat(frames, ignore_index=True)
df.shape

2.2.4 Modify your wrangle function to create a new feature "neighborhood".

# extract neighborhood
    df["neighborhood"] = df["place_with_parent_names"].str.split("|",expand=True)[3].head()
    df.drop(columns="place_with_parent_names", inplace=True)


2.2.5 Create your feature matrix X_train and target vector y_train. 

target = "price_aprox_usd"
features = ["neighborhood"]
y_train = df[target]
X_train = df[features]

2.2.6 Calculate the baseline mean absolute error for your model.
y_mean = y_train.mean()
y_pred_baseline = [y_mean] * len(y_train)
print("Mean apt price:", y_mean)
print("Baseline MAE:", mean_absolute_error(y_train ,y_pred_baseline))

2.2.7 OneHotEncoder


#First, instantiate a OneHotEncoder named ohe. Make sure to set the use_cat_names argument to True.
ohe = OneHotEncoder(use_cat_names = True)

# Next, fit your transformer to the feature matrix X_train.
ohe.fit(X_train)

# Finally, use your encoder to transform the feature matrix X_train, and assign the transformed data to the variable XT_train.
XT_train = ohe.transform(X_train)
print(XT_train.shape)
XT_train.head()











